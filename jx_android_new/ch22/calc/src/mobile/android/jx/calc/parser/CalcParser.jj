options{  static = false;   //  不生成静态的变量，以便可以创建多个分析器实例}PARSER_BEGIN(CalcParser)package mobile.android.jx.calc.parser;import java.io.StringReader;import java.io.Reader;public class CalcParser{  public CalcParser(String expr)  {    this ((Reader) (new StringReader(expr)));  }}PARSER_END(CalcParser)SKIP :{  " "| "\t"| "\r"| "\n"}TOKEN :{  < ADD : "+" >| < SUB : "-" >| < MUL : "*" >| < DIV : "/" >| < MOD : "%" >| < LPAREN : "(" >| < RPAREN : ")" >| < NUMBER :    [ "0"-"9" ] ([ "0"-"9" ])*  | ([ "0"-"9" ])+ "." ([ "0"-"9" ])* (< EXPONENT >)?  | "." ([ "0"-"9" ])+ (< EXPONENT >)?  | ([ "0"-"9" ])+ < EXPONENT > >| < #EXPONENT : [ "e", "E" ] ([ "+", "-" ])? ([ "0"-"9" ])+ >| < SIN : "sin" >| < COS : "cos" >| < PI : "PI" >}double expr() :{  double temp = 0;  double first, second;}{  first = term()  {    temp = first;  }  (    < ADD > second = term()    {      temp = first + second;      first = temp;    }  | < SUB > second = term()    {      temp = first - second;      first = temp;    }  )*  {    return temp;  }}double term() :{  double temp = 0;  double first, second;}{  first = factor()  {    temp = first;  }  (    < MUL > second = factor()    {      temp = first * second;      first = temp;    }  | < DIV > second = factor()    {      temp = first / second;      first = temp;    }  | < MOD > second = factor()    {      temp = first % second;      first = temp;    }  )*  {    return temp;  }}double factor() :{  double temp = 0;}{  < NUMBER >  {    return Double.parseDouble(token.image);  }| < LPAREN > temp = expr() < RPAREN >  {    return temp;  }| < SIN > < LPAREN > temp = expr() < RPAREN >  {    return java.lang.Math.sin(temp);  }| < COS > < LPAREN > temp = expr() < RPAREN >  {    return java.lang.Math.cos(temp);  }| < PI >  {    return 3.1415926;  }}